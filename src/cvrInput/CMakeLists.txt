IF(WIN32)
    IF(CALVR_WIN_DYNAMIC)
        ADD_DEFINITIONS(-DCVRINPUT_LIBRARY)
    ELSE(CALVR_WIN_DYNAMIC)
        ADD_DEFINITIONS(-DCVRINPUT_LIBRARY_STATIC)
    ENDIF(CALVR_WIN_DYNAMIC)
ENDIF(WIN32)

SET(LIB_NAME cvrInput)
SET(HEADER_PATH ${CalVR_SOURCE_DIR}/include/${LIB_NAME})
SET(LIB_PUBLIC_HEADERS
    ${HEADER_PATH}/TrackingManager.h
    ${HEADER_PATH}/TrackerBase.h
    ${HEADER_PATH}/TrackerShmem.h
    ${HEADER_PATH}/TrackerSlave.h
    ${HEADER_PATH}/TrackerMouse.h
    ${HEADER_PATH}/TrackerPlugin.h
    ${HEADER_PATH}/Export.h
)

SET(EXTRA_SOURCE)

FIND_PACKAGE(VRPN)
FIND_PACKAGE(Omicron)
FIND_PACKAGE(Librk)
FIND_PACKAGE(OVR)
FIND_PACKAGE(OPENVR)
FIND_PACKAGE(OSGOPENVR)

IF(VRPN_FOUND)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/TrackerVRPN.h)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/TrackerGyroMouse.h)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} TrackerVRPN.cpp)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} TrackerGyroMouse.cpp)
ENDIF(VRPN_FOUND)

IF(OMICRON_FOUND)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/TrackerOmicron.h)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} TrackerOmicron.cpp)
ENDIF(OMICRON_FOUND)

IF(LIBRK_FOUND)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/Gesture.h)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} Gesture.cpp)
ENDIF(LIBRK_FOUND)

IF(OVR_FOUND)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/TrackerOculus.h)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} TrackerOculus.cpp)
ENDIF(OVR_FOUND)

IF(OPENVR_FOUND)
    MESSAGE( STATUS "OpenVR found" )
ENDIF(OPENVR_FOUND)
IF(OSGOPENVR_FOUND)
    MESSAGE( STATUS "OsgOpenVRViewer found" )
ENDIF(OSGOPENVR_FOUND)

IF(OPENVR_FOUND AND OSGOPENVR_FOUND)
    SET(LIB_PUBLIC_HEADERS ${LIB_PUBLIC_HEADERS} ${HEADER_PATH}/TrackerOpenVR.h)
    SET(EXTRA_SOURCE ${EXTRA_SOURCE} TrackerOpenVR.cpp)
ENDIF(OPENVR_FOUND AND OSGOPENVR_FOUND)



SET(LIB_SRC_FILES
    ${EXTRA_SOURCE}
    TrackingManager.cpp
    TrackerShmem.cpp
    TrackerSlave.cpp
    TrackerMouse.cpp
    TrackerPlugin.cpp
)

SET(LIB_EXTERNAL_INCLUDES
    ${OSG_INCLUDE_DIR}
)

SET(LIB_EXTERNAL_LIBRARIES
    ${OSG_LIBRARIES}
)

SET(LIB_INTERNAL_LIBRARIES
    config
    util
    kernel
)

IF(VRPN_FOUND)
    ADD_DEFINITIONS(-DWITH_VRPN)
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${VRPN_INCLUDE_DIR})
    SET(LIB_EXTERNAL_LIBRARIES ${LIB_EXTERNAL_LIBRARIES} ${VRPN_LIBRARY})
ENDIF(VRPN_FOUND)

IF(OMICRON_FOUND)
    ADD_DEFINITIONS(-DWITH_OMICRON)
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${OMICRON_INCLUDE_DIR})
ENDIF(OMICRON_FOUND)

IF(LIBRK_FOUND)
    ADD_DEFINITIONS(-DWITH_LIBRK)
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${LIBRK_INCLUDE_DIR})
    SET(LIB_EXTERNAL_LIBRARIES  ${LIB_EXTERNAL_LIBRARIES} ${LIBRK_LIBRARY})
ENDIF(LIBRK_FOUND)

IF(OVR_FOUND)
    ADD_DEFINITIONS(-DWITH_OVR)
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${OVR_INCLUDE_DIR})
	#SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${OVR_KERNEL_SRC_DIR})
    SET(LIB_EXTERNAL_LIBRARIES  ${LIB_EXTERNAL_LIBRARIES} ${OVR_LIBRARY})
ENDIF(OVR_FOUND)

IF(OPENVR_FOUND AND OSGOPENVR_FOUND)
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${OPENVR_INCLUDE_DIRS})
    SET(LIB_EXTERNAL_INCLUDES ${LIB_EXTERNAL_INCLUDES} ${OSGOPENVR_INCLUDE_DIR})
    
	SET(LIB_EXTERNAL_LIBRARIES ${LIB_EXTERNAL_LIBRARIES} ${OPENVR_LIBRARY})
	SET(LIB_EXTERNAL_LIBRARIES ${LIB_EXTERNAL_LIBRARIES} ${OSGOPENVR_LIBRARY})
ENDIF(OPENVR_FOUND AND OSGOPENVR_FOUND)

SETUP_CORE_LIBRARY(${LIB_NAME})
